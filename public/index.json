[{"content":"","date":null,"permalink":"/","section":"Cycles Of Reinvention","summary":"","title":"Cycles Of Reinvention"},{"content":"","date":null,"permalink":"/tags/engineering/","section":"Tags","summary":"","title":"Engineering"},{"content":"One of many things that I had to learn when I graduated from college was to make things done. I do not say that I have not successful projects before but I spent lot of time to search the best way.\nI had a habit to figure out what technology to use before I have my use-cases. It is kind of habit of programmers that they like to do make their own frameworks for the things they do. They glue some set of classes and they are eager to use them everywhere.\nThey tend to use other frameworks that are popular in community. Actually they use tons of them. It is nothing bad until you can clearly answer what problem they solve, what are the positives and what slows you down. Without these answers it is only blind religion and then comes inevitably time when you will bend your code for purposes of framework limitations.\nIn the end, maybe you do not need those sexy frameworks.\nI had other assignment. I had to write set of diagrams to present dependencies and structure of new protocol I was implementing. I have spent a lot of time to find best tool for drawing diagrams and I did not make it in time. Then I realise I do not need it at all. I just need my whiteboard and markers and do the job fast and dirty. Then I used Inkscape for fast sketch. The task was done in a few hours instead of days.\nDo not try to figure out the best way because you do not see the whole picture. Just try to solve your problem.\nA things you know\nthings you know things you know that you don\u0026rsquo;t know things you don\u0026rsquo;t know that you don\u0026rsquo;t know This picture displays normal order of knowledge we possess. Do not try to figure out the future. We are bad at this. Focus what is here, what is now. Base your actions on actual metrics and make decision based on them. Reasoning with \u0026ldquo;It is good to\u0026rdquo;, \u0026ldquo;I think\u0026rdquo;, \u0026ldquo;I hope\u0026rdquo; is a bad practise. You can easily stuck in blind corner of programming religion without creating any business value. Lets face it, business value is what actually generates money that we earn.\nIf you face the same problem, you can inspire from this guy as I did:\n","date":"6 November 2013","permalink":"/posts/lesson-learned/","section":"Posts","summary":"","title":"Lesson learned: Do your job instead of looking for the best way."},{"content":"","date":null,"permalink":"/tags/people/","section":"Tags","summary":"","title":"People"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/soft-skills/","section":"Tags","summary":"","title":"Soft Skills"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/anti-patterns/","section":"Tags","summary":"","title":"Anti Patterns"},{"content":"","date":null,"permalink":"/tags/premature-optimisation/","section":"Tags","summary":"","title":"Premature Optimisation"},{"content":"It happened some time ago. Some of our servers went crazy. Traffic was in normal, but out of the blank CPU was 95%. It seemed to be a nutshell of a day. I looked for the culprit in stack traces with my colleagues and found this place in code\n1 2 3 public JSONObject createJSON(String raw) { return new JSONObject(raw); } Creating simple JSON object caused the infinite loop?! WOW. JSONObject uses internally java.util.HashMap. After some googling, there was a single culprit candidate - race condition.\nBut how it is posssible? There is no shared state. Object is created on the heap and it is not shared between threads. My mind was torn to two pieces. One was 100% sure that this is a race condition but the second one told me the oposite.\nOut of cheer frustration we started to look to the sourcecodes of JSON library. And we found it !\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class JSONObject { /** * The maximum number of keys in the key pool. */ private static final int size = 100; /** * Key pooling is like string interning, but without * permanently tying up memory. To help conserve * memory, storage of duplicated key strings in * JSONObjects will be avoided by using a key pool * to manage unique key string objects. This is * used by JSONObject.put(string, object). */ private static HashMap keyPool = new HashMap(size); public JSONObject(String source) throws JSONException { ... //cache parsed keys String pooled = (String)keyPool.get(key); if (pooled == null) { keyPool.put(key, key); } ... } } I stayed stunned for a while. A static map shared between all instances of JSONObject - the mind-blower of a day. This solved all our questions. This was the wanted critical section. We could not reveal it before because it happened only sometimes when HashMap internal threshold was reached (we did not use more than 100 JSON unique keys before :DD ). This bug was hopefully fixed in the library after half a year.\nThis is my personal encounter with anti-pattern \u0026ldquo;Premature optimization\u0026rdquo;. It caused whole day of searching, patching source codes and redeploying server instances. A lot for a simple sunny day\u0026hellip;\n","date":"31 October 2013","permalink":"/posts/straight-way-to-abyss/","section":"Posts","summary":"","title":"Straight way to abyss: Premature optimization"},{"content":"There is always one big obstacle in software development. Developers themselves.\nFirst you will realize that your team is not composed of top programmers. You will find out that there are numerous programmers with hard-coded way of doing things and OOP is for them new way of doing their job. And they are not used to it. They are smart, they love statics and they love them very much. And if you are not careful and you listen to them too much your code will turn to one monolithic rock that is pain to maintain, because everything is bound to everything via static references. Every change is harder and harder and it will inevitably come time when its heaviness will crush your project to abyss.\nSecondly, when you work with someone, it is important to have some code conventions. Now come the hard part. Programmers are really selfish people and it is hard to persuade them to use same coding standards. They do not like it. They will argue that they will make it much faster their way. This problem is similar to building dog-kennel:\nWhen politics are approving nuclear plant, it is decided in minutes. Nobody really knows how that complicated atom-splitting force works, so the plan will be approved without objections. But then they have to make judgement on dog-kennel placed in front of it. They will not agree in decades. Because everyone have different option about the proper colour.\nBefore introduction of any new technology you have to have overall agreement, to prevent two or multiple coding standards. At least try it :)\nThird. Developers are messy and make a tons of crap code. Every time I see this, the reason is most of the time the same. Then I always remember one story from Bob Martin\u0026rsquo;s speach at QCon.\nWhen we were young, 9 years old, we had a system for our bedroom: “somewhere on the floor”. Underwear was somewhere on the floor. Then we easily found it. Socks were somewhere on the floor, under the bed. We found them because we had good system. We knew where thinks were - somewhere on the floor. Then our mum came in. She started to clean the room out of cheer frustration because there was no way to know for 9 years old what the concept of order means. This does not change till you get 30 and get married. And then you realize when 2 people are using the same space, the system does not work so perfectly.\nI personally consider people relations the hardest part of programming. To make your project done you have to be sometimes loving and caring mother or sometimes ruthless dad when there are no other options. You have to find way to all members of your team. Find problem that blocks them from doing their task and solve it. Otherwise it harms your project, your goals your business.\n","date":"29 October 2013","permalink":"/posts/first-step-to-design/","section":"Posts","summary":"","title":"First step to design: It is always about people"},{"content":"","date":null,"permalink":"/tags/politics/","section":"Tags","summary":"","title":"Politics"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]